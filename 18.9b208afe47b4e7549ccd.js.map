{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/do_verify_email/do_verify_email.tsx","webpack:///./components/do_verify_email/index.ts"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","DoVerifyEmail","constructor","super","async","actions","verifyUserEmail","verify","URLSearchParams","location","search","get","handleSuccess","handleError","VerifyEmailErrors","FAILED_EMAIL_VERIFICATION","state","verifyStatus","serverError","componentDidMount","verifyEmail","handleRedirect","isLoggedIn","GlobalActions","browserHistory","push","encodeURIComponent","setState","clearErrors","logError","message","AnnouncementBarMessages","EMAIL_VERIFIED","trackEvent","me","getMe","FAILED_USER_STATE_GET","type","alt","src","logoImage","siteName","connect","getConfig","SiteName","Boolean","getCurrentUserId","dispatch","bindActionCreators"],"mappings":"qTAoBe,MAAMA,UAAmBC,IAAMC,cAKnCC,SACH,OACI,yBACIC,GAAG,cACHC,UAAU,iBAEV,kBAAC,IAAD,CACIC,QAASC,KAAKC,MAAMF,QACpBG,GAAIF,KAAKC,MAAME,KAEf,kBAAC,IAAD,CACIN,GAAG,qBACHO,eAAe,aAEbC,GACE,0BACIR,GAAG,mBACHC,UAAU,yBACVO,MAAOA,EAAMC,cAIzB,kBAAC,IAAD,CACIT,GAAG,kBACHO,eAAe,Y,EA7BlBX,E,aARjBU,I,WAKAJ,Q,aAGiBN,E,eAC4B,CACzCU,IAAK,O,qBCtBbI,EAAOC,QAAU,IAA0B,8C,qWCuC5B,MAAMC,UAAsBf,IAAMC,cACtCe,YAAYT,GACfU,MAAMV,GADuB,qBA+DnBW,UACV,MAAOC,SAAS,gBAACC,IAAoBd,KAAKC,MACpCc,QAAeD,EAAiB,IAAIE,gBAAgBhB,KAAKC,MAAMgB,SAASC,QAASC,IAAI,UAAY,IAEnG,SAAUJ,EACVf,KAAKoB,gBACE,UAAWL,GAClBf,KAAKqB,YAAYC,IAAkBC,6BAnEvCvB,KAAKwB,MAAQ,CACTC,aAAc,UACdC,YAAa,MAIdC,oBACH3B,KAAK4B,cAGTC,iBACQ7B,KAAKC,MAAM6B,WACXC,MAEAC,IAAeC,KAAK,+BAAiCC,mBAAoB,IAAIlB,gBAAgBhB,KAAKC,MAAMgB,SAASC,QAASC,IAAI,UAAY,KAIlJ,sBAGI,GAFAnB,KAAKmC,SAAS,CAACV,aAAc,YAC7BzB,KAAKC,MAAMY,QAAQuB,cACfpC,KAAKC,MAAM6B,WAAY,CACvB9B,KAAKC,MAAMY,QAAQwB,SAAS,CACxBC,QAASC,IAAwBC,iBAClC,GACHC,YAAW,WAAY,gBACvB,MAAMC,QAAW1C,KAAKC,MAAMY,QAAQ8B,QAChC,SAAUD,EACV1C,KAAK6B,iBACE,UAAWa,GAClB1C,KAAKqB,YAAYC,IAAkBsB,4BAGvC5C,KAAK6B,iBAIbR,YAAYwB,GACR,IAAInB,EAAc,KACdmB,IAASvB,IAAkBC,0BAC3BG,EACI,kBAAC,IAAD,CACI7B,GAAG,uCACHO,eAAe,gGAGhByC,IAASvB,IAAkBsB,wBAClClB,EACI,kBAAC,IAAD,CACI7B,GAAG,iDACHO,eAAe,gDAI3BJ,KAAKmC,SAAS,CACVV,aAAc,UACdC,gBAeR9B,SACI,GAAgC,YAA5BI,KAAKwB,MAAMC,aACX,OAAQ,kBAAC,IAAD,MAGZ,IAAIC,EAAc,KASlB,OARI1B,KAAKwB,MAAME,cACXA,EACI,yBAAK5B,UAAW,wBACZ,2BAAOA,UAAU,iBAAiBE,KAAKwB,MAAME,eAMrD,6BACI,kBAAC,IAAD,MACA,yBAAK5B,UAAU,aACX,yBAAKA,UAAU,0BACX,yBACIgD,IAAK,mBACLhD,UAAU,mBACViD,IAAKC,MAET,yBAAKlD,UAAU,mBACX,4BAAKE,KAAKC,MAAMgD,UAChB,wBAAInD,UAAU,gBACV,kBAAC,IAAD,CACID,GAAG,uBACHO,eAAe,6EAGtBsB,O,EA3GRjB,E,aAnBjBQ,S,WACIC,O,mCAEJ+B,S,WACApC,Q,WACIC,gB,oBACA6B,M,oBACAN,S,oBACAD,Y,iCAEJN,W,sBCMWoB,6BApBf,SAAyB1B,GACrB,MACMyB,EADSE,oBAAU3B,GACD4B,SACxB,MAAO,CACHtB,WAAYuB,QAAQC,2BAAiB9B,IACrCyB,eAIR,SAA4BM,GACxB,MAAO,CACH1C,QAAS2C,6BAAmB,CACxB1C,kCACA6B,cACAN,oBACAD,2BACDmB,MAIIL,CAA6CzC","file":"18.9b208afe47b4e7549ccd.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/6ff072d843f837505f68ad89158fd0b0.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ServerError} from 'mattermost-redux/types/errors';\n\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\ntype Props = {\n    location: {\n        search: string;\n    };\n    siteName?: string;\n    actions: {\n        verifyUserEmail: (token: string) => ActionFunc | ActionResult;\n        getMe: () => ActionFunc | ActionResult;\n        logError: (error: ServerError, displayable: boolean) => void;\n        clearErrors: () => void;\n    };\n    isLoggedIn: boolean;\n\n}\n\ntype State = {\n    verifyStatus: string;\n    serverError: JSX.Element | null;\n}\n\nexport default class DoVerifyEmail extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: null,\n        };\n    }\n\n    public componentDidMount(): void {\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            browserHistory.push('/login?extra=verified&email=' + encodeURIComponent((new URLSearchParams(this.props.location.search)).get('email') || ''));\n        }\n    }\n\n    async handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        this.props.actions.clearErrors();\n        if (this.props.isLoggedIn) {\n            this.props.actions.logError({\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n            }, true);\n            trackEvent('settings', 'verify_email');\n            const me = await this.props.actions.getMe();\n            if ('data' in me) {\n                this.handleRedirect();\n            } else if ('error' in me) {\n                this.handleError(VerifyEmailErrors.FAILED_USER_STATE_GET);\n            }\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type: string) {\n        let serverError = null;\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_GET) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token') || '');\n\n        if ('data' in verify) {\n            this.handleSuccess();\n        } else if ('error' in verify) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\nimport {verifyUserEmail, getMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\n\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from '../../types/store';\n\nimport DoVerifyEmail from './do_verify_email';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            getMe,\n            logError,\n            clearErrors,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n"],"sourceRoot":""}