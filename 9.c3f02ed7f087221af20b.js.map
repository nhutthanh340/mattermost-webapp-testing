{"version":3,"sources":["webpack:///./actions/views/mfa.js","webpack:///./components/access_history_modal/access_history_modal.tsx","webpack:///./components/access_history_modal/index.ts","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/components/more_info.tsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/color_input.tsx","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/index.ts","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.js","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/security/mfa_section/index.ts","webpack:///./components/user_settings/security/mfa_section/mfa_section.tsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/sidebar/index.ts","webpack:///./components/user_settings/sidebar/user_settings_sidebar.tsx","webpack:///./components/user_settings/user_settings.tsx"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","AccessHistoryModal","React","PureComponent","constructor","props","actions","getUserAudits","setState","show","state","componentDidMount","onShow","render","content","userAudits","length","onHide","mapStateToProps","getCurrentUserAudits","mapDispatchToProps","bindActionCreators","connect","ActivityLogModal","altId","e","preventDefault","modalContent","$","target","closest","addClass","setTimeout","removeClass","revokeSession","then","getSessions","sessions","loading","activityList","reduce","array","currentSession","index","type","push","id","locale","submitRevoke","PropTypes","string","isRequired","oneOfType","object","func","shape","ActivityLog","moreInfo","session","device_id","includes","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","localizeMessage","t","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","Date","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","os","indexOf","browser","date","getMonthLong","time","handleMoreInfo","number","MoreInfo","firstAccessTime","create_at","getUserSessions","getCurrentLocale","hexRegex","ColorInput","colorPicker","current","contains","isOpened","colorInput","focus","newColorData","hex","onChange","handleChange","value","split","map","ch","join","event","startsWith","test","ensureLongColourValue","toUpperCase","setHex","key","togglePicker","setSelectionRange","createRef","color","componentWillMount","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","onBlur","onKeyDown","selectValue","backgroundColor","handleColorChange","TimezoneSuggestion","Suggestion","item","isSelection","timezone","className","handleClick","node","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","toLowerCase","makeMapStateToProps","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","enablePreviewFeatures","EnablePreviewFeatures","enableUserDeactivation","EnableUserDeactivation","advancedSettingsCategory","Preferences","CATEGORY_ADVANCED_SETTINGS","sendOnCtrlEnter","get","codeBlockOnCtrlEnter","formatting","joinLeave","currentUser","getCurrentUser","savePreferences","updateUserActive","revokeAllSessionsForUser","AdvancedSettingsDisplay","getPreference","ADVANCED_FILTER_JOIN_LEAVE","JoinLeaveSection","currentTarget","joinLeaveState","section","onUpdateSection","joinLeavePreference","category","user_id","name","activeSection","AdvancedSections","JOIN_LEAVE","handleOnChange","handleSubmit","isSaving","serverError","handleUpdateSection","renderOnOffLabel","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","advancedSettings","settings","send_on_ctrl_enter","code_block_ctrl_enter","join_leave","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","showDeactivateAccountModal","preReleaseFeatures","setting","checked","String","forEach","lastIndexOf","features","preferences","userId","Array","isArray","error","message","data","emitUserLoggedOutEvent","getStateFromProps","updateSection","description","default","defaultMessage","mac","title","Utils","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","inputs","formattingSection","renderFormattingSection","formattingSectionDivider","previewFeaturesSection","previewFeaturesSectionDivider","toggleFeature","saveEnabledFeatures","count","deactivateAccountSection","makeConfirmationModal","auth_service","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","handleDeactivateAccountSubmit","handleHideDeactivateAccountModal","closeModal","collapseModal","bool","timezones","getTimezones","userTimezone","getUserTimezone","automaticTimezoneNotSet","useAutomaticTimezone","automaticTimezone","shouldAutoUpdateTimezone","allowCustomThemes","AllowCustomThemes","enableLinkPreviews","EnableLinkPreviews","defaultClientLocale","DefaultClientLocale","enableThemeSelection","EnableThemeSelection","enableTimezone","ExperimentalTimezone","lockTeammateNameDisplay","getLicense","LockTeammateNameDisplay","configTeammateNameDisplay","TeammateNameDisplay","currentUserTimezone","getUserCurrentTimezone","militaryTime","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","USE_MILITARY_TIME_DEFAULT","teammateNameDisplay","NAME_NAME_FORMAT","channelDisplayMode","CHANNEL_DISPLAY_MODE","CHANNEL_DISPLAY_MODE_DEFAULT","messageDisplay","MESSAGE_DISPLAY","MESSAGE_DISPLAY_DEFAULT","collapseDisplay","COLLAPSE_DISPLAY","COLLAPSE_DISPLAY_DEFAULT","linkPreviewDisplay","LINK_PREVIEW_DISPLAY","LINK_PREVIEW_DISPLAY_DEFAULT","autoUpdateTimezone","UserSettingsDisplay","updateMe","ManageLanguages","ManageLanguage","isKeyPressed","KeyCodes","ESCAPE","openMenu","querySelector","classList","remove","stopPropagation","ENTER","add","selectedOption","user","submitUser","err","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","componentWillUnmount","options","languages","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","input","body","setLanguage","handleKeyDown","handleMenuClose","handleMenuOpen","changeLanguage","ManageTimezones","manualTimezoneInput","selected","manualTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","toString","updatedUser","getBrowserTimezone","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","providers","setSwitchBoxRef","handleTimezoneSelected","SuggestionList","changeTimezone","getDisplayStateFromProps","timePreference","teammateNameDisplayPreference","channelDisplayModePreference","messageDisplayPreference","collapseDisplayPreference","linkPreviewDisplayPreference","updateState","newState","prevSections","theme","clock","linkpreview","message_display","channel_display_mode","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","display","createSection","firstOption","secondOption","thirdOption","disabled","extraInfo","submit","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","describe","collapseSection","defaultDisplay","linkPreviewSection","clockSection","teammateNameDisplaySection","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","setRequireConfirm","setEnforceFocus","ColorChooser","newColor","COPY_SUCCESS_INTERVAL","messages","defineMessages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","newTheme","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","setThemeDefaults","stringify","textarea","refs","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","execCommand","showCopySuccess","copySuccess","hide","on","onCodeThemeChange","off","assign","image","UserAgent","slideToggle","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","group","pasteBox","pasteBoxChange","onChangeHandle","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","getThemeCategory","currentTeamId","getCurrentTeamId","getTheme","applyToAllTeams","CATEGORY_THEME","showAllTeamsCheckbox","getMyTeamsCount","saveTheme","deleteTeamSpecificThemes","UserSettingsTheme","allowedThemes","AllowedThemes","PremadeThemeChooser","premadeThemes","hasAllowedThemes","trim","k","THEMES","hasOwnProperty","premadeTheme","extend","activeClass","replace","propTypes","arrayOf","defaultProps","ThemeSetting","teamId","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","ReactDOM","findDOMNode","resetFields","DEFAULT_CODE_THEME","scrollTop","updateType","displayCustom","custom","premade","themeUI","handleImportModal","allTeamsCheckbox","submitTheme","focused","requireEmailVerification","RequireEmailVerification","maxFileSize","parseInt","MaxFileSize","ldapFirstNameAttributeSet","LdapFirstNameAttributeSet","ldapLastNameAttributeSet","LdapLastNameAttributeSet","samlFirstNameAttributeSet","SamlFirstNameAttributeSet","samlLastNameAttributeSet","SamlLastNameAttributeSet","ldapNicknameAttributeSet","LdapNicknameAttributeSet","samlNicknameAttributeSet","SamlNicknameAttributeSet","samlPositionAttributeSet","SamlPositionAttributeSet","ldapPositionAttributeSet","LdapPositionAttributeSet","ldapPictureAttributeSet","LdapPictureAttributeSet","logError","clearErrors","getMe","sendVerificationEmail","setDefaultProfileImage","uploadProfileImage","UserSettingsGeneralTab","holders","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","email","resendStatus","showSpinner","handleEmailResend","formatMessage","intl","usernameError","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","emailError","password","emailUpdated","sectionIsSaving","verificationEnabled","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","submitActive","pictureFile","file","AcceptedProfileImageTypes","size","loadingPicture","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","updateFirstName","MAX_FIRSTNAME_LENGTH","updateLastName","MAX_LASTNAME_LENGTH","notifClick","updateTab","notifLink","notify","submitName","nicknameSection","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","submitNickname","usernameSection","usernameLabel","updateUsername","submitUsername","positionSection","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","setDefault","imgSrc","submitPicture","last_picture_update","setDefaultProfilePicture","updatePicture","minMessage","intlShape","injectIntl","UserSettings","DesktopNotificationSettings","cancel","getAttribute","setParentState","activityRadio","activity","NotificationLevels","MENTION","NONE","soundSection","soundRadio","sound","ALL","saving","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","SECONDS_PER_MINUTE","EmailNotificationSetting","enableEmail","newInterval","emailInterval","emailIntervalPreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","onSubmit","onCancel","sendEmailNotifications","INTERVAL_IMMEDIATE","INTERVAL_HOUR","INTERVAL_FIFTEEN_MINUTES","batchingOptions","batchingInfo","enableEmailBatching","INTERVAL_NEVER","getEmailInterval","getDerivedStateFromProps","nextProps","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","sendPushNotifications","SendPushNotifications","enableAutoResponder","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","MESSAGE_MAX_LENGTH","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","onMessageChanged","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customcheck","custommentions","updateCustomMentionKeys","pushActivityRadio","pushStatusRadio","ONLINE","pushStatusSettings","handlePushStatusRadio","OFFLINE","handlePushRadio","handleNotifyCommentsRadio","keysSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","i","substring","commentsSection","commentsActive","autoResponderSection","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","UserUtils","roles","enableOAuthServiceProvider","EnableOAuthServiceProvider","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableLdap","EnableLdap","enableSaml","EnableSaml","enableSignUpWithOffice365","EnableSignUpWithOffice365","experimentalEnableAuthenticationTransfer","ExperimentalEnableAuthenticationTransfer","canUseAccessTokens","passwordConfig","getPasswordConfig","getBool","updateUserPassword","getAuthorizedOAuthApps","deauthorizeOAuthApp","SecurityTab","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","mfaEnforced","EnforceMultifactorAuthentication","mfaActive","mfaAvailable","mfa_active","MfaSection","SECTION_MFA","browserHistory","buttonText","removeMfa","setupMfa","renderTitle","renderDescription","renderContent","renderHelpText","userAccessTokens","entities","users","myUserAccessTokens","getUserAccessTokensForUser","createUserAccessToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","UserAccessTokenSection","SECTION_TOKENS","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","tokenCreationState","handleCancelConfirm","newtokendescription","tokenError","confirmCopyToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmButton","confirmComplete","confirmHideCancel","handleCreateToken","confirmCreateToken","tokenId","revokeToken","tokenListClass","tokenList","values","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","noTokenText","isMobile","newTokenSection","saveTokenKeyPress","stopCreatingToken","startCreatingToken","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","authorizedApps","newPassword","confirmPassword","passwordError","valid","defaultState","getDefaultState","savingPassword","appId","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","encodeURIComponent","link","apps","homepage","deauthorizeApp","icon_url","icon50","wrapperClass","authService","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","numMethods","signInSection","createSignInSection","oauthSection","createOAuthAppsSection","tokensSection","ariaLabel","closeUnusedDirectMessages","CATEGORY_SIDEBAR_SETTINGS","channelSwitcherOption","channelSidebarOrganizationOption","getNewSidebarPreference","sidebarPreference","getSidebarPreferences","unreadsAtTop","unreads_at_top","favoriteAtTop","favorite_at_top","showChannelOrganization","ExperimentalChannelOrganization","showChannelSidebarOrganization","ExperimentalChannelSidebarOrganization","showUnusedOption","CloseUnusedDirectMessages","UserSettingsSidebar","Settings","grouping","sorting","close_unused_direct_messages","channel_switcher_section","channel_sidebar_organization","ChannelGrouping","ChannelSorting","updatedSidebarSettings","trackSettingChangeIfNecessary","Grouping","Sorting","UnreadsAtTop","FavoriteAtTop","NewSidebar","sectionName","contents","renderAutoCloseDMLabel","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","helpChannelSidebarOrganizationText","renderChannelSwitcherLabel","ChannelSidebarOrganization","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","ChannelSwitcherSection","channelSidebarOrganizationDisabled","channelOrganizationSection","renderChannelOrganizationSection","channelSidebarOrganizationSection","renderChannelSidebarOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection"],"mappings":"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","file":"9.c3f02ed7f087221af20b.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />,\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: {\n        props: {\n            os: string;\n            platform: string;\n            browser: string;\n        };\n        create_at: number;\n        last_activity_at: number;\n        id: string;\n    };\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\n\nconst hexRegex = /^#([\\da-f]{3}|[\\da-f]{6})$/i;\n\ntype Props = {\n    id: string;\n    color: string;\n    onChange?: (hex: string) => void;\n}\n\ntype State = {\n    isOpened: boolean;\n    hex: string;\n}\n\nclass ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n        this.state = {\n            isOpened: false,\n            hex: this.props.color.toUpperCase(),\n        };\n    }\n\n    public componentWillMount() {\n        this.setHex();\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (this.props.color !== prevProps.color && this.ensureLongColourValue(this.state.hex) !== this.props.color) {\n            this.setHex();\n        }\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private setHex() {\n        this.setState({hex: this.props.color.toUpperCase()});\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    private ensureLongColourValue = (value: string) => {\n        if (value.length !== 4) {\n            return value;\n        }\n        return value.split('').map((ch, index) => {\n            if (index === 0) {\n                return ch;\n            }\n            return `${ch}${ch}`;\n        }).join('');\n    }\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let {value} = event.target;\n        if (!value.startsWith('#')) {\n            value = '#' + value;\n        }\n        if (!hexRegex.test(value)) {\n            return;\n        }\n        this.setState({hex: value});\n        const {onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(this.ensureLongColourValue(value));\n        }\n    };\n\n    private onBlur = () => {\n        const {hex} = this.state;\n        if (hex.length === 4) {\n            const value = this.ensureLongColourValue(hex);\n            const {onChange: handleChange} = this.props;\n            if (handleChange && value.length === 7) {\n                handleChange(value);\n                this.setState({hex: value.toUpperCase()});\n            }\n        } else {\n            this.setHex();\n        }\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    private selectValue = (event: React.FocusEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    public render() {\n        const {color, id} = this.props;\n        const {isOpened, hex} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={hex}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onKeyDown={this.onKeyDown}\n                    onFocus={this.selectValue}\n                />\n                <span\n                    id={`${id}-squareColorIcon`}\n                    className='input-group-addon color-pad'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        id={`${id}-squareColorIconValue`}\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true',\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>,\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>,\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview Pre-release Features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview Pre-release Features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\nexport default class ManageLanguage extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        locale: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const locales = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {value: locales[userLocale].value, label: locales[userLocale].name};\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.addEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    handleContainerKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            document.querySelector('.modal-body').classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            document.querySelector('.modal-body').classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    }\n\n    setLanguage = (selectedOption) => {\n        this.setState({\n            locale: selectedOption.value,\n            selectedOption,\n        });\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    // Do nothing since changing the locale essentially refreshes the page\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    }\n\n    handleMenuClose = () => {\n        document.querySelector('.modal-body').classList.remove('no-scroll');\n        this.setState({openMenu: false});\n    }\n\n    handleMenuOpen = () => {\n        document.querySelector('.modal-body').classList.add('no-scroll');\n        this.setState({openMenu: true});\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                {value: lang.value, label: lang.name},\n            );\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        useAutomaticTimezone: PropTypes.bool.isRequired,\n        automaticTimezone: PropTypes.string.isRequired,\n        manualTimezone: PropTypes.string.isRequired,\n        timezones: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.props.updateSection('');\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe pt-2'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='pt-2'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        lockTeammateNameDisplay: PropTypes.bool,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default Appearance of Image Previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.node.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color, id} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    id={id}\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.PureComponent {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = $('.copy-theme-success');\n        copySuccess.show();\n\n        setTimeout(() => {\n            copySuccess.hide();\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.PureComponent {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.PureComponent {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.scrollToTop();\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>,\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>,\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nclass UserSettingsGeneralTab extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n            getMe: PropTypes.func.isRequired,\n            updateMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequired,\n            setDefaultProfileImage: PropTypes.func.isRequired,\n            uploadProfileImage: PropTypes.func.isRequired,\n        }).isRequired,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        ldapPositionAttributeSet: PropTypes.bool,\n        samlPositionAttributeSet: PropTypes.bool,\n        ldapPictureAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    var state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPictureAttributeSet)) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id={'setting_picture.help.profile'}\n                        defaultMessage='Upload a picture in BMP, JPG or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport UserSettings from './user_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class DesktopNotificationSettings extends React.PureComponent {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on Firefox, Edge, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport {Preferences} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\nexport default class EmailNotificationSetting extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onChange: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n\n        this.setState({\n            enableEmail,\n            newInterval: parseInt(e.currentTarget.getAttribute('data-email-interval'), 10),\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            focused,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                describe={description}\n                focused={focused}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.',\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.',\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>,\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pt-2'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\ntype Actions = {\n    deactivateMfa: () => Promise<{error?: {message: string}}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n        militaryTime: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            updateUserPassword: PropTypes.func.isRequired,\n            getAuthorizedOAuthApps: PropTypes.func.isRequired,\n            deauthorizeOAuthApp: PropTypes.func.isRequired,\n        }),\n    }\n\n    static defaultProps = {\n        user: {},\n        activeSection: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const {data, error} = await this.props.actions.getAuthorizedOAuthApps();\n        if (data) {\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if (error) {\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    }\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const {data, error: err} = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if (data) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if (err) {\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = async (e) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app');\n\n        const {data, error} = await this.props.actions.deauthorizeOAuthApp(appId);\n        if (data) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.currentPassword', 'Current Password')}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.newPassword', 'New Password')}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.retypePassword', 'Retype New Password')}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                focused={true}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        dialogType={ActivityLogModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences, getNewSidebarPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days',\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true',\n    );\n\n    const channelSidebarOrganizationOption = getNewSidebarPreference(state);\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        channelSidebarOrganizationOption: String(channelSidebarOrganizationOption),\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showChannelSidebarOrganization: config.ExperimentalChannelSidebarOrganization !== 'disabled',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'mattermost-redux/src/types/users';\n\nimport {PreferenceType} from 'mattermost-redux/types/preferences';\n\nimport {SidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport Constants from 'utils/constants';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport interface UserSettingsSidebarProps {\n    actions: {\n\n        /**\n     * Function to save the user's preferences\n     */\n        savePreferences: (userId: string, preferences: PreferenceType[]) => any;\n    };\n\n    /**\n   * Current user object\n   */\n    user: UserProfile;\n\n    /**\n   * The preferences for closing the unused direct messages channels\n   */\n    closeUnusedDirectMessages: string;\n\n    /**\n   * Display the close unused direct messages channels options\n   */\n    showUnusedOption: boolean;\n\n    /**\n   * Display the channel grouping and sorting sections options\n   */\n    showChannelOrganization: boolean;\n\n    /**\n   * Display the setting to toggle the new sidebar\n   */\n    showChannelSidebarOrganization: boolean;\n\n    /**\n   * The preferences to show the channel switcher in the sidebar\n   */\n    channelSwitcherOption: string;\n\n    /**\n   * The preferences to show the channel sidebar organization setting\n   */\n    channelSidebarOrganizationOption: string;\n\n    /**\n   * Display the unread channels sections options\n   * The preferences to display channels in sidebar\n   */\n    sidebarPreference: SidebarPreferences;\n\n    /**\n   * Option for including unread channels at top\n   */\n    unreadsAtTop: string;\n\n    /**\n   * Option for including favorite channels at top\n   */\n    favoriteAtTop: string;\n\n    updateSection?: (section: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nenum Settings {\n    CloseUnusedDirectMessages = 'close_unused_direct_messages',\n    ChannelSwitcherSection = 'channel_switcher_section',\n    ChannelSidebarOrganization = 'channel_sidebar_organization',\n    Grouping = 'grouping',\n    UnreadsAtTop = 'unreadsAtTop',\n    FavoriteAtTop = 'favoriteAtTop',\n    Sorting = 'sorting',\n    NewSidebar = 'newSidebar',\n    ChannelGrouping= 'channel_grouping',\n    ChannelSorting= 'channel_sorting',\n}\n\ninterface GroupingSorting {\n\n    /**\n   * Group channels by type or none\n   */\n    [Settings.Grouping]: string;\n\n    /**\n   * Sort channels by recency or alphabetical order\n   */\n    [Settings.Sorting]: string;\n}\n\ninterface SettingType extends GroupingSorting {\n    [Settings.CloseUnusedDirectMessages]: string;\n    [Settings.ChannelSwitcherSection]: string;\n    [Settings.ChannelSidebarOrganization]: string;\n    [Settings.UnreadsAtTop]: string;\n    [Settings.FavoriteAtTop]: string;\n    [Settings.NewSidebar]?: string;\n}\n\ninterface UserSettingsSidebarState {\n    settings: SettingType;\n    isSaving: boolean;\n    serverError?: string;\n}\n\nexport default class UserSettingsSidebar extends React.PureComponent<UserSettingsSidebarProps, UserSettingsSidebarState> {\n    constructor(props: UserSettingsSidebarProps) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = (): UserSettingsSidebarState => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            channelSidebarOrganizationOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                channel_sidebar_organization: channelSidebarOrganizationOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary(setting: keyof SettingType) {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting as keyof GroupingSorting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting<T extends keyof SettingType>(setting: T, value: SettingType[T]): void {\n        const settings: SettingType = {\n            ...this.state.settings,\n            [setting]: value,\n        };\n\n        this.setState({\n            ...this.state,\n            settings,\n        });\n    }\n\n    handleSubmit = (setting: Settings | keyof SettingType): void => {\n        const {actions, user} = this.props;\n        const preferences: PreferenceType[] = [];\n\n        if (setting === Settings.ChannelGrouping || setting === Settings.ChannelSorting) {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary(Settings.Grouping);\n            this.trackSettingChangeIfNecessary(Settings.Sorting);\n            this.trackSettingChangeIfNecessary(Settings.UnreadsAtTop);\n            this.trackSettingChangeIfNecessary(Settings.FavoriteAtTop);\n            this.trackSettingChangeIfNecessary(Settings.NewSidebar);\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName: string): string | null => {\n        const {showChannelOrganization, channelSidebarOrganizationOption} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return channelSidebarOrganizationOption === 'true' ? 'channelSidebarOrganization' : 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSidebarOrganization':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    };\n\n    updateSection = (section: string): void => {\n        if (this.props.updateSection) {\n            this.setState(this.getStateFromProps());\n            this.setState({isSaving: false});\n            this.props.updateSection(section);\n        }\n    };\n\n    renderAutoCloseDMLabel = (value: string): JSX.Element => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = (): JSX.Element => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, Settings.CloseUnusedDirectMessages, 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, Settings.CloseUnusedDirectMessages, 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = (): JSX.Element[] => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages: JSX.Element[] = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />,\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />,\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>,\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />,\n        );\n\n        let atTopId: string | null = null;\n        let atTopDefaultMessage: string | null = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>,\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage as any}\n                />,\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value: string): JSX.Element => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelSidebarOrganizationSection = (): JSX.Element => {\n        const helpChannelSidebarOrganizationText = (\n            <FormattedMarkdownMessage\n                id={t('user.settings.sidebar.channelSidebarOrganizationSection.desc')}\n                defaultMessage={'When enabled, access experimental channel sidebar features, including collapsible sections and unreads filtering. [Learn more](!https://about.mattermost.com/default-sidebar/) or [give us feedback](!https://about.mattermost.com/default-sidebar-survey/)'}\n            />\n        );\n\n        let contents = (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                        defaultMessage='Experimental Sidebar Features'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSidebarOrganizationOption)}\n                section={'channelSidebarOrganization'}\n                updateSection={this.updateSection}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSidebarOrganization') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                            defaultMessage='Experimental Sidebar Features'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSidebarOrganizationSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                                    defaultMessage='Experimental Sidebar Features'\n                                />\n                            </legend>\n                            <div\n                                id='channelSidebarOrganizationRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionEnabled'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'true'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSidebarOrganization, 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSidebarOrganizationRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionOff'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'false'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSidebarOrganization, 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSidebarOrganizationelpText'>\n                                <br/>\n                                {helpChannelSidebarOrganizationText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_sidebar_organization'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelOrganizationSection = (): JSX.Element => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents: JSX.Element;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs: JSX.Element[] = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, Settings.Grouping, 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, Settings.Grouping, 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, Settings.Sorting, 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, Settings.Sorting, 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting(Settings.UnreadsAtTop, (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting(Settings.FavoriteAtTop, (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>,\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n\n                    // todo: describe is expecting JSX. Element | string, but we're passing an array. Should the type be changed to JSX.Element[] or just pass only one value here?\n                    describe={this.renderOrganizationLabel() as any}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = (): JSX.Element => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSwitcherSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.channelSwitcherSectionTitle'\n                                    defaultMessage='Channel Switcher'\n                                />\n                            </legend>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSwitcherSection, 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, Settings.ChannelSwitcherSection, 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render(): JSX.Element {\n        const {showUnusedOption, showChannelOrganization, showChannelSidebarOrganization, channelSidebarOrganizationOption} = this.props;\n\n        const channelSidebarOrganizationDisabled = channelSidebarOrganizationOption === 'false';\n\n        const channelOrganizationSection = (showChannelOrganization && channelSidebarOrganizationDisabled) ? this.renderChannelOrganizationSection() : null;\n        const channelSidebarOrganizationSection = showChannelSidebarOrganization ? this.renderChannelSidebarOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = channelSidebarOrganizationDisabled ? this.renderChannelSwitcherSection() : null;\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div\n                            className='modal-back'\n                            onClick={this.props.collapseModal}\n                        >\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelSidebarOrganizationSection}\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\ntype Props = {\n    user: {};\n    activeTab?: string;\n    activeSection?: string;\n    updateSection?: () => void;\n    updateTab?: () => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setEnforceFocus: () => void;\n    setRequireConfirm: () => void;\n}\n\nexport default class UserSettings extends React.PureComponent<Props, {}> {\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}"],"sourceRoot":""}