{"version":3,"sources":["webpack:///./components/password_reset_form/index.js","webpack:///./components/password_reset_form/password_reset_form.js"],"names":["mapStateToProps","state","SiteName","siteName","getConfig","mapDispatchToProps","dispatch","actions","bindActionCreators","resetUserPassword","connect","PasswordResetForm","React","PureComponent","constructor","props","e","preventDefault","password","passwordInput","current","value","length","Constants","MIN_PASSWORD_LENGTH","setState","error","chars","token","URLSearchParams","location","search","get","data","browserHistory","push","PASSWORD_CHANGE","message","createRef","render","formClass","handlePasswordReset","id","t","defaultMessage","PropTypes","object","isRequired","string","shape","func"],"mappings":"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","file":"28.0aec7fc0671156ea3484.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {resetUserPassword} from 'mattermost-redux/actions/users';\n\nimport PasswordResetForm from './password_reset_form';\n\nconst mapStateToProps = (state) => {\n    const {SiteName: siteName} = getConfig(state);\n    return {siteName};\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        resetUserPassword,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetForm);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n.jsx';\n\nexport default class PasswordResetForm extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            resetUserPassword: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n        };\n\n        this.passwordInput = React.createRef();\n    }\n\n    handlePasswordReset = async (e) => {\n        e.preventDefault();\n\n        const password = this.passwordInput.current.value;\n        if (!password || password.length < Constants.MIN_PASSWORD_LENGTH) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='password_form.error'\n                        defaultMessage='Please enter at least {chars} characters.'\n                        values={{\n                            chars: Constants.MIN_PASSWORD_LENGTH,\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.setState({error: null});\n\n        const token = (new URLSearchParams(this.props.location.search)).get('token');\n        const {data, error} = await this.props.actions.resetUserPassword(token, password);\n        if (data) {\n            browserHistory.push('/login?extra=' + Constants.PASSWORD_CHANGE);\n            this.setState({error: null});\n        } else if (error) {\n            this.setState({error: error.message});\n        }\n    }\n\n    render() {\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='form-group has-error'>\n                    <label className='control-label'>\n                        {this.state.error}\n                    </label>\n                </div>\n            );\n        }\n\n        let formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='signup-team__container'>\n                    <h3>\n                        <FormattedMessage\n                            id='password_form.title'\n                            defaultMessage='Password Reset'\n                        />\n                    </h3>\n                    <form onSubmit={this.handlePasswordReset}>\n                        <p>\n                            <FormattedMessage\n                                id='password_form.enter'\n                                defaultMessage='Enter a new password for your {siteName} account.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                        </p>\n                        <div className={formClass}>\n                            <LocalizedInput\n                                id='resetPasswordInput'\n                                type='password'\n                                className='form-control'\n                                name='password'\n                                ref={this.passwordInput}\n                                placeholder={{id: t('password_form.pwd'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                                autoFocus={true}\n                            />\n                        </div>\n                        {error}\n                        <button\n                            id='resetPasswordButton'\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='password_form.change'\n                                defaultMessage='Change my password'\n                            />\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}