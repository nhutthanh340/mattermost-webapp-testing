{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/widgets/icons/fa_logout_icon.jsx","webpack:///./actions/views/mfa.js","webpack:///./components/mfa/setup/setup.jsx","webpack:///./components/mfa/setup/index.js","webpack:///./components/mfa/confirm.jsx","webpack:///./components/mfa/mfa_controller/mfa_controller.jsx","webpack:///./components/mfa/mfa_controller/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","LogoutIcon","activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","Setup","constructor","super","e","preventDefault","input","current","value","replace","length","setState","error","actions","then","server_error_id","Utils","message","history","push","state","secret","qrCode","createRef","componentDidMount","user","currentUser","mfa_active","data","serverError","qr_code","errorContent","mfaRequired","formClass","enforceMultifactorAuthentication","values","siteName","onSubmit","submit","alt","style","src","ref","placeholder","t","autoFocus","type","PropTypes","object","string","bool","isRequired","shape","func","maxHeight","connect","config","getConfig","SiteName","EnforceMultifactorAuthentication","getCurrentUser","bindActionCreators","KeyCodes","Constants","Confirm","redirectUserToDefaultTeam","isKeyPressed","ENTER","document","body","addEventListener","onKeyPress","componentWillUnmount","removeEventListener","MFAController","emitUserLoggedOutEvent","classList","add","getElementById","enableMultifactorAuthentication","remove","backButton","mfa","handleOnClick","logoImage","path","match","updateParent","propTypes","location","children","node","license","getLicense","MFA","EnableMultifactorAuthentication"],"mappings":"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","file":"12.f74b9fff577b2afec12a.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/6ff072d843f837505f68ad89158fd0b0.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LogoutIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.logout'\n                defaultMessage='Logout Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-1x fa-angle-left'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class Setup extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object,\n        siteName: PropTypes.string,\n        enforceMultifactorAuthentication: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            activateMfa: PropTypes.func.isRequired,\n            generateMfaSecret: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {secret: '', qrCode: ''};\n\n        this.input = React.createRef();\n    }\n\n    componentDidMount() {\n        const user = this.props.currentUser;\n        if (!user || user.mfa_active) {\n            this.props.history.push('/');\n            return;\n        }\n\n        this.props.actions.generateMfaSecret().then(({data, error}) => {\n            if (error) {\n                this.setState({\n                    serverError: error.message,\n                });\n                return;\n            }\n\n            this.setState({\n                secret: data.secret,\n                qrCode: data.qr_code,\n            });\n        });\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const code = this.input.current.value.replace(/\\s/g, '');\n        if (!code || code.length === 0) {\n            this.setState({error: Utils.localizeMessage('mfa.setup.codeError', 'Please enter the code from Google Authenticator.')});\n            return;\n        }\n\n        this.setState({error: null});\n\n        this.props.actions.activateMfa(code).then(({error}) => {\n            if (error) {\n                if (error.server_error_id === 'ent.mfa.activate.authenticate.app_error') {\n                    this.setState({\n                        error: Utils.localizeMessage('mfa.setup.badCode', 'Invalid code. If this issue persists, contact your System Administrator.'),\n                    });\n                } else {\n                    this.setState({\n                        error: error.message,\n                    });\n                }\n\n                return;\n            }\n\n            this.props.history.push('/mfa/confirm');\n        });\n    }\n\n    render() {\n        let formClass = 'form-group';\n        let errorContent;\n        if (this.state.error) {\n            errorContent = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let mfaRequired;\n        if (this.props.enforceMultifactorAuthentication) {\n            mfaRequired = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='mfa.setup.required'\n                        defaultMessage='**Multi-factor authentication is required on {siteName}.**'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div>\n                <form\n                    onSubmit={this.submit}\n                    className={formClass}\n                >\n                    {mfaRequired}\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step1'\n                            defaultMessage=\"**Step 1: **On your phone, download Google Authenticator from [iTunes](!https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8') or [Google Play](!https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en)\"\n                        />\n                    </p>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step2'\n                            defaultMessage='**Step 2: **Use Google Authenticator to scan this QR code, or manually type in the secret key'\n                        />\n                    </p>\n                    <div className='form-group'>\n                        <div className='col-sm-12'>\n                            <img\n                                alt={'qr code image'}\n                                style={style.qrCode}\n                                src={'data:image/png;base64,' + this.state.qrCode}\n                            />\n                        </div>\n                    </div>\n                    <br/>\n                    <div className='form-group'>\n                        <p className='col-sm-12'>\n                            <FormattedMessage\n                                id='mfa.setup.secret'\n                                defaultMessage='Secret: {secret}'\n                                values={{\n                                    secret: this.state.secret,\n                                }}\n                            />\n                        </p>\n                    </div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step3'\n                            defaultMessage='**Step 3: **Enter the code generated by Google Authenticator'\n                        />\n                    </p>\n                    <p>\n                        <LocalizedInput\n                            ref={this.input}\n                            className='form-control'\n                            placeholder={{id: t('mfa.setup.code'), defaultMessage: 'MFA Code'}}\n                            autoFocus={true}\n                        />\n                    </p>\n                    {errorContent}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='mfa.setup.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    qrCode: {maxHeight: 170},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {activateMfa, generateMfaSecret} from 'actions/views/mfa';\n\nimport Setup from './setup.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        currentUser: getCurrentUser(state),\n        siteName,\n        enforceMultifactorAuthentication,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            activateMfa,\n            generateMfaSecret,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Setup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/utils.jsx';\n\nimport {redirectUserToDefaultTeam} from 'actions/global_actions.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class Confirm extends React.PureComponent {\n    componentDidMount() {\n        document.body.addEventListener('keydown', this.onKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.body.removeEventListener('keydown', this.onKeyPress);\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        redirectUserToDefaultTeam();\n    }\n\n    onKeyPress = (e) => {\n        if (isKeyPressed(e, KeyCodes.ENTER)) {\n            this.submit(e);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <form\n                    onSubmit={this.submit}\n                    onKeyPress={this.onKeyPress}\n                    className='form-group'\n                >\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.confirm.complete'\n                            defaultMessage='**Set up complete!**'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='mfa.confirm.secure'\n                            defaultMessage='Your account is now secure. Next time you sign in, you will be asked to enter a code from the Google Authenticator app on your phone.'\n                        />\n                    </p>\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='mfa.confirm.okay'\n                            defaultMessage='Okay'\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Route, Switch} from 'react-router-dom';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\n\nimport Setup from '../setup';\nimport Confirm from '../confirm';\n\nexport default class MFAController extends React.PureComponent {\n    componentDidMount() {\n        document.body.classList.add('sticky');\n        document.getElementById('root').classList.add('container-fluid');\n\n        if (!this.props.enableMultifactorAuthentication) {\n            this.props.history.push('/');\n        }\n    }\n\n    componentWillUnmount() {\n        document.body.classList.remove('sticky');\n        document.getElementById('root').classList.remove('container-fluid');\n    }\n\n    handleOnClick = (e) => {\n        e.preventDefault();\n        emitUserLoggedOutEvent('/login');\n    }\n\n    render() {\n        let backButton;\n        if (this.props.mfa && this.props.enforceMultifactorAuthentication) {\n            backButton = (\n                <div className='signup-header'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleOnClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            );\n        } else {\n            backButton = (<BackButton/>);\n        }\n\n        return (\n            <div className='inner-wrap'>\n                <div className='row content'>\n                    <div>\n                        {backButton}\n                        <div className='col-sm-12'>\n                            <div className='signup-team__container'>\n                                <h3>\n                                    <FormattedMessage\n                                        id='mfa.setupTitle'\n                                        defaultMessage='Multi-factor Authentication Setup'\n                                    />\n                                </h3>\n                                <img\n                                    alt={'signup team logo'}\n                                    className='signup-team-logo'\n                                    src={logoImage}\n                                />\n                                <div id='mfa'>\n                                    <Switch>\n                                        <Route\n                                            path={`${this.props.match.url}/setup`}\n                                            render={(props) => (\n                                                <Setup\n                                                    state={this.state}\n                                                    updateParent={this.updateParent}\n                                                    {...props}\n                                                />\n                                            )}\n                                        />\n                                        <Route\n                                            path={`${this.props.match.url}/confirm`}\n                                            render={(props) => (\n                                                <Confirm\n                                                    state={this.state}\n                                                    updateParent={this.updateParent}\n                                                    {...props}\n                                                />\n                                            )}\n                                        />\n                                    </Switch>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMFAController.propTypes = {\n    location: PropTypes.object.isRequired,\n    children: PropTypes.node,\n    mfa: PropTypes.bool.isRequired,\n    enableMultifactorAuthentication: PropTypes.bool.isRequired,\n    enforceMultifactorAuthentication: PropTypes.bool.isRequired,\n\n    /*\n     * Object from react-router\n     */\n    match: PropTypes.shape({\n        url: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport MFAController from './mfa_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfa = license.MFA === 'true';\n    const enableMultifactorAuthentication = config.EnableMultifactorAuthentication === 'true';\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        mfa,\n        enableMultifactorAuthentication,\n        enforceMultifactorAuthentication,\n    };\n}\n\nexport default connect(mapStateToProps)(MFAController);\n"],"sourceRoot":""}