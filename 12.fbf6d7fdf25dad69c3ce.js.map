{"version":3,"sources":["webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/index.js","webpack:///./components/common/back_button.tsx","webpack:///./components/login/login_mfa.jsx","webpack:///./images/logo.png"],"names":["ClaimController","React","PureComponent","render","email","URLSearchParams","props","location","search","get","newType","currentType","logoImage","match","url","siteName","passwordConfig","actions","switchLdapToEmail","ldapLoginFieldName","PropTypes","object","isRequired","string","shape","func","EmailToLDAP","constructor","e","preventDefault","state","passwordError","ldapError","ldapPasswordError","serverError","password","emailPasswordInput","current","value","Utils","setState","ldapId","ldapIdInput","trim","ldapPassword","ldapPasswordInput","submit","loginId","token","emailToLdap","data","follow_link","window","href","err","showMfa","server_error_id","id","message","createRef","formClass","passwordClass","ldapClass","ldapPasswordClass","loginPlaceholder","content","preSubmit","site","style","usernameInput","t","defaultMessage","display","EmailToOAuth","passwordInput","error","emailToOAuth","type","Constants","SAML_SERVICE","toUpperCase","uiType","LDAPToEmail","confirmError","valid","confirmPassword","passwordConfirmInput","then","startsWith","confimClass","passwordPlaceholder","OAuthToEmail","oauthToEmail","mapStateToProps","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","mapDispatchToProps","dispatch","bindActionCreators","connect","BackButton","onClick","title","toString","LoginMfa","target","replace","saving","errorClass","handleSubmit","handleChange","localizeMessage"],"mappings":"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","file":"12.fbf6d7fdf25dad69c3ce.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            switchLdapToEmail: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    render() {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToLDAP extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n\n        this.emailPasswordInput = React.createRef();\n        this.ldapIdInput = React.createRef();\n        this.ldapPasswordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.emailPasswordInput.current && this.emailPasswordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.ldapIdInput.current && this.ldapIdInput.current.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.ldapPasswordInput.current && this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapId, ldapPassword) => {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        this.setState({ldapError: err.message, showMfa: false});\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        this.setState({passwordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            },\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref={this.emailPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref={this.ldapIdInput}\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch Account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToOAuth extends React.PureComponent {\n    static propTypes = {\n        newType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {showMfa: false, password: ''};\n\n        this.passwordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n        var state = {};\n\n        var password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({error: err.message, showMfa: false});\n                }\n            },\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch Account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LDAPToEmail extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        switchLdapToEmail: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        this.ldapPasswordInput = React.createRef();\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapPassword) => {\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\n            if (data && data.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        });\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class OAuthToEmail extends React.PureComponent {\n    static propTypes = {\n        currentType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            },\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to Email and Password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token,\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/6ff072d843f837505f68ad89158fd0b0.png\";"],"sourceRoot":""}