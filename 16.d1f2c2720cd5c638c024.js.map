{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/login/login_mfa.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","LoginMfa","constructor","super","e","preventDefault","token","target","value","trim","replace","state","setState","submit","loginId","password","saving","serverError","errorClass","onSubmit","handleSubmit","type","name","placeholder","t","spellCheck","autoComplete","autoFocus","onChange","handleChange","disabled","localizeMessage","savingMessage","PropTypes","string","isRequired","func","OAuthToEmail","passwordInput","current","error","Utils","valid","passwordConfig","confirmPassword","passwordConfirmInput","oauthToEmail","currentType","email","data","follow_link","window","location","href","err","message","createRef","formClass","uiType","Constants","SAML_SERVICE","toUpperCase","values","site","siteName","ref","object","EmailToOAuth","emailToOAuth","newType","showMfa","server_error_id","content","preSubmit","LDAPToEmail","passwordError","confirmError","ldapPasswordError","ldapPassword","ldapPasswordInput","switchLdapToEmail","then","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","ldapError","emailPasswordInput","ldapId","ldapIdInput","emailToLdap","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","display","ClaimController","URLSearchParams","search","get","alt","src","logoImage","path","match","actions","shape","connect","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","dispatch","bindActionCreators"],"mappings":"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","file":"16.d1f2c2720cd5c638c024.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/6ff072d843f837505f68ad89158fd0b0.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token,\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class OAuthToEmail extends React.PureComponent {\n    static propTypes = {\n        currentType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            },\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to Email and Password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToOAuth extends React.PureComponent {\n    static propTypes = {\n        newType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {showMfa: false, password: ''};\n\n        this.passwordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n        var state = {};\n\n        var password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({error: err.message, showMfa: false});\n                }\n            },\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch Account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LDAPToEmail extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        switchLdapToEmail: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        this.ldapPasswordInput = React.createRef();\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapPassword) => {\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\n            if (data && data.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        });\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToLDAP extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n\n        this.emailPasswordInput = React.createRef();\n        this.ldapIdInput = React.createRef();\n        this.ldapPasswordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.emailPasswordInput.current && this.emailPasswordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.ldapIdInput.current && this.ldapIdInput.current.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.ldapPasswordInput.current && this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapId, ldapPassword) => {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        this.setState({ldapError: err.message, showMfa: false});\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        this.setState({passwordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            },\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref={this.emailPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref={this.ldapIdInput}\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch Account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            switchLdapToEmail: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    render() {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n"],"sourceRoot":""}