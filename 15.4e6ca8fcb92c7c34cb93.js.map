{"version":3,"sources":["webpack:///./actions/views/login.js","webpack:///./components/common/back_button.tsx","webpack:///./components/common/site_name_and_description.tsx","webpack:///./components/login/login_controller/index.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_mfa.jsx","webpack:///./images/logo.png"],"names":["login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","promise","result","error","server_error_id","data","BackButton","React","PureComponent","render","props","onClick","url","title","toString","SiteNameAndDescription","customDescriptionText","siteName","description","mapStateToProps","state","config","getConfig","license","getLicense","isLicensed","IsLicensed","customBrandText","CustomBrandText","CustomDescriptionText","enableCustomBrand","EnableCustomBrand","enableLdap","EnableLdap","enableOpenServer","EnableOpenServer","enableSaml","EnableSaml","enableSignInWithEmail","EnableSignInWithEmail","enableSignInWithUsername","EnableSignInWithUsername","enableSignUpWithEmail","EnableSignUpWithEmail","enableSignUpWithGitLab","EnableSignUpWithGitLab","enableSignUpWithGoogle","EnableSignUpWithGoogle","enableSignUpWithOffice365","EnableSignUpWithOffice365","ldapLoginFieldName","LdapLoginFieldName","samlLoginButtonText","SamlLoginButtonText","SiteName","initializing","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","experimentalPrimaryTeam","ExperimentalPrimaryTeam","team","getTeamByName","member","getMyTeamMember","id","team_id","currentUser","getCurrentUser","mapDispatchToProps","actions","bindActionCreators","addUserToTeamFromInvite","connect","LoginController","constructor","sessionExpired","document","intl","formatMessage","defaultMessage","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","window","focus","then","closeNotification","catch","e","preventDefault","onDismissSessionExpired","location","newQuery","search","replace","browserHistory","pathname","hash","loginIdInput","current","value","setState","passwordInput","trim","toLowerCase","t","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","serverError","ldapUsername","submit","token","loading","push","encodeURIComponent","showMfa","message","params","URLSearchParams","inviteToken","get","inviteId","finishSignin","query","redirectTo","LocalStorageStore","setWasLoggedIn","match","name","GlobalActions","target","brandImageError","text","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","handleBrandImageError","mentions","imagesMetadata","loginPlaceholders","length","slice","join","extraParam","Constants","GET_TERMS_ERROR","TERMS_REJECTED","SIGNIN_CHANGE","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","samlEnabled","errorClass","preSubmit","handleLoginIdChange","createLoginPlaceholder","handlePasswordChange","checkSignUpEnabled","getOAuthRoute","getUrl","createExtraText","createRef","componentDidMount","configureTitle","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","content","customContent","customClass","backButton","hideMfa","createLoginOptions","createCustomLogin","logoImage","intlShape","isRequired","PropTypes","object","bool","string","shape","func","injectIntl","LoginMfa","saving","handleSubmit","handleChange","localizeMessage"],"mappings":"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","file":"15.4e6ca8fcb92c7c34cb93.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost',\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport Markdown from 'components/markdown';\n\nimport LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n\n        this.loginIdInput = React.createRef();\n        this.passwordInput = React.createRef();\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.passwordInput.current.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.',\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.loginIdInput.current) {\n            loginId = this.loginIdInput.current.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.passwordInput.current) {\n            password = this.passwordInput.current.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        <Markdown\n                            message={text}\n                            options={\n                                {mentions: false,\n                                    imagesMetadata: null}\n                            }\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref={this.loginIdInput}\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref={this.passwordInput}\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>,\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>,\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password.'\n                        />\n                    </Link>\n                </div>,\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>,\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>,\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />,\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div\n                    id='login_section'\n                    className='col-sm-12'\n                >\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token,\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/6ff072d843f837505f68ad89158fd0b0.png\";"],"sourceRoot":""}